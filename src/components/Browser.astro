---
import { Image } from "astro:assets";
import SimpleLemon from "../images/simple-lemon.svg";
import GripVertical from "../images/grip-vertical.svg";
import { Icon } from "astro-icon/components";
interface Props {
  title?: string;
  class?: string;
}

const dropId = crypto.randomUUID();

const { class: className, title } = Astro.props;
---

<div
  data-drop-id={dropId}
  class:list={["dropzone relative touch-none", className]}
>
  <div
    class="window absolute bottom-0 left-0 right-0 top-0 z-0 overflow-hidden rounded-lg"
  >
    <slot name="behind" />
  </div>
  <div
    data-drop-id={dropId}
    class:list={[
      "drag-me",
      className,
      "relative z-10 rounded-lg transition-transform duration-300 motion-reduce:transition-none",
    ]}
  >
    <!-- <div class="absolute top-0 bottom-0 right-0 left-0 shadow-lg z-0 rounded-lg"> -->
    <header
      class="drag-handle relative flex items-center justify-between gap-2 rounded-tl-lg rounded-tr-lg border-2 border-teal-dark bg-teal py-1 pl-1 pr-4"
    >
      <div class="flex shrink-0">
        <Image
          class="ignore-pointer left-[-4px] text-teal-dark"
          src={GripVertical}
          alt="grip grip"
        />
        <Image class="width-[50px]" src={SimpleLemon} alt="A simple lemon" />
      </div>
      <div class="w-full font-zeitung text-white">
        <span class="ignore ignore-pointer">{title}</span>
      </div>
      <button
        type="button"
        title="Reset position"
        aria-label="Reset position"
        tabindex="-1"
        class="ignore grid h-[25px] w-[25px] shrink-0 place-items-center rounded-lg border border-teal-dark bg-teal-light text-teal-dark"
      >
        <Icon name="arrow-square-in" />
      </button>
    </header>
    <div
      class="overflow-hidden rounded-bl-lg rounded-br-lg border-2 border-t-0 border-teal-dark"
    >
      <slot name="front" />
    </div>
  </div>
</div>

<script>
  import interact from "interactjs";
  const resetPosition = (target: HTMLElement) => {
    const x = parseFloat(target.getAttribute("data-x") || "0") * -1;
    const y = parseFloat(target.getAttribute("data-y") || "0") * -1;
    target.style.transform = "translate(" + x + "px, " + y + "px)";
  };

  interact(".drag-me")
    .draggable({
      allowFrom: ".drag-handle",
      ignoreFrom: ".ignore",
      autoScroll: true,
      listeners: {
        move(event) {
          const target = event.target;
          const x = (parseFloat(target.getAttribute("data-x")) || 0) + event.dx;
          const y = (parseFloat(target.getAttribute("data-y")) || 0) + event.dy;

          target.style.translate = `${x}px ${y}px`;

          target.setAttribute("data-x", x);
          target.setAttribute("data-y", y);
          console.log("dragged");
        },
      },
    })
    .pointerEvents({
      allowFrom: ".drag-handle",
      ignoreFrom: ".ignore-pointer",
    })
    .on("doubletap", (event) => {
      const target = event.currentTarget;
      console.log("doubletapped, target", target);
      resetPosition(target);
    })
    .on("tap", (event) => {
      if (
        event.target.tagName !== "BUTTON" &&
        event.target.parentElement.tagName !== "BUTTON"
      ) {
        return;
      }
      const target = event.currentTarget;
      resetPosition(target);
    });

  interact(".dropzone").dropzone({
    overlap: 0.4,
    accept: ".drag-me",
    checker: (
      dragEvent, // related dragmove or dragend
      event, // Touch, Pointer or Mouse Event
      dropped, // bool default checker result
      dropzone, // dropzone Interactable
      dropzoneElement, // dropzone element
      draggable, // draggable Interactable
      draggableElement // draggable element
    ) => {
      return (
        dropped &&
        dropzoneElement.dataset.dropId === draggableElement.dataset.dropId
      );
    },
    ondrop: (event) => {
      const target = event.relatedTarget;
      console.log("dropped, relatedTarget", target);
      resetPosition(target);
    },
  });
</script>
<style>
  .window {
    box-shadow:
      inset -1px -1px #818181,
      inset 1px 1px #dfdfdf,
      inset -2px -2px #acacac,
      inset 2px 2px #fff;
    background: #e0e0e0;
    padding: 3px;
  }
</style>
